[ print a buffer as a string ]
dragon.print.buffer_as_string(buffer !dragon.buffer)() = {
    [ setup current ]
    dragon.pack(buffer, buffer:start)(current_character !dragon.current)

    [ print characters ]
    @print dragon.always = {
        [ check for end of string ]
        dragon.current.within_range(current_character, dragon.always)(out_of_characters)
        dragon.jump.bottom(out_of_characters, @print)()

        [ read character ]
        dragon.address_to_cell(current_character:progress, dragon.ascii_character.byte_size)(character, current_character:progress)

        [ print character ]
        dragon.print.character(character)()

        [ jump to loop start ]
        dragon.jump.top(dragon.always, @print)()
    }
}

[ print an unsigned integer ]
dragon.print.integer.unsigned(value !dragon.cell)() = {
    [  ]
}
