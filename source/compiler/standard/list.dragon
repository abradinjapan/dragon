[ list definition ]
!dragon.list(
    allocation !dragon.buffer,
    length !dragon.cell, [ length of content ]
    increase !dragon.cell, [ when more space is needed, allocate in increments of 'increase' ]
    append_count !dragon.cell [ stats ]
)

[ open list ]
dragon.list.open(increase !dragon.cell)(list !dragon.list) = {
    [ allocate buffer ]
    dragon.buffer.request(increase)(list:allocation)

    [ setup list data ]
    dragon.copy(dragon.constant.0)(list:length)
    dragon.copy(increase)(list:increase)
    dragon.copy(dragon.constant.0)(list:append_count)
}

[ close list ]
dragon.list.close(list !dragon.list)() = {
    [ deallocate buffer ]
    dragon.buffer.return(list:allocation)()
}

[ calculate content buffer ]
dragon.list.calculate.content_buffer(list !dragon.list)(content_buffer !dragon.buffer) = {
    [ calculate content buffer ]
    dragon.copy(list:allocation:start)(content_buffer:start)
    dragon.buffer.calculate.end_address(content_buffer:start, list:length)(content_buffer:end)
}

[ append buffer data ]
dragon.list.append.buffer_data(list !dragon.list, data !dragon.buffer)(list !dragon.list) = {
    [ calculate lengths ]
    dragon.buffer.calculate.length(data)(data.length)
    dragon.buffer.calculate.length(list:allocation)(old_allocation.length)

    [ calculate required length ]
    dragon.integer.add(list:length, data.length)(required_length)

    [ reallocate buffer if necessary ]
    dragon.integer.within_range(dragon.constant.0, required_length, old_allocation.length, dragon.always)(reallocate)
    @reallocate reallocate = {
        [ calculate chunk count ]
        dragon.integer.divide(required_length, list:increase)(increase_chunk_count)
        dragon.integer.add(increase_chunk_count, dragon.constant.1)(increase_chunk_count)

        [ calculate required new allocation size ]
        dragon.integer.multiply(increase_chunk_count, list:increase)(new_allocation.length)

        [ allocate ]
        dragon.buffer.request(new_allocation.length)(new_allocation)

        [ calculate data copy buffers ]
        dragon.list.calculate.content_buffer(list)(copy.source)
        dragon.buffer.calculate.end_address(new_allocation:start, list:length)(destination.end)
        dragon.pack(new_allocation:start, destination.end)(copy.destination !dragon.buffer)

        [ copy old data ]
        dragon.buffer.copy.low_to_high(copy.source, copy.destination)()

        [ delete old allocation ]
        dragon.buffer.return(list:allocation)()

        [ install new allocation ]
        dragon.copy(new_allocation)(list:allocation)
    }

    [ calculate appending addresses ]
    dragon.integer.add(list:allocation:start, list:length)(append_destination.start)
    dragon.buffer.calculate.end_address(append_destination.start, data.length)(append_destination.end)
    dragon.pack(append_destination.start, append_destination.end)(append_destination !dragon.buffer)

    [ append data ]
    dragon.buffer.copy.low_to_high(data, append_destination)()

    [ update length ]
    dragon.copy(required_length)(list:length)

    [ update append count ]
    dragon.integer.add(list:append_count, dragon.constant.1)(list:append_count)
}

[ append buffer structure to list ]
dragon.list.append.structure.buffer(list !dragon.list, buffer !dragon.buffer)(list !dragon.list) = {
    [ setup data ]
    dragon.structure.byte_size(buffer)(buffer.byte_size)

    [ allocate temp buffer ]
    dragon.buffer.request(buffer.byte_size)(temp_allocation)

    [ copy structure to buffer ]
    dragon.structure_to_buffer(buffer, temp_allocation)(advancement)

    [ append data ]
    dragon.list.append.buffer_data(list, temp_allocation)(list)

    [ close temp buffer ]
    dragon.buffer.return(temp_allocation)()
}
